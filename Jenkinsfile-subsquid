@Library('jenkins-library')

String agentLabel            = 'docker-build-agent'
String subsquidToken         = 'subsquidToken'
String targetProject         =  "fearless-x-polkadot-test"
List   jobParams             = [
    string(defaultValue: targetProject, name: 'targetProject', trim: true),
    booleanParam(defaultValue: false, name: 'fullClean'),
    booleanParam(defaultValue: false, name: 'restart'),
    booleanParam(defaultValue: false, name: 'hardReset'),
    booleanParam(defaultValue: false, name: 'deploy'),
    ]
String registry               = 'https://docker.soramitsu.co.jp'
String agentImage             = registry + '/build-tools/node:16-pnpm7'
String dockerBuildToolsUserId = 'bot-build-tools-ro'
Boolean disableSecretScanner  = false
String secretScannerExclusion = '.*squid.yaml$|.docker-compose.yml\$'
String telegramChatId    = 'telegram-deploy-chat-id'
Boolean statusNotif      = true

properties([
    parameters( jobParams )
])

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timestamps()
        disableConcurrentBuilds()
    }
    agent {
        docker {
            image agentImage
            label agentLabel
        }
    }
    environment {
        SUBSQUID_CLI = '2.0.3'
        SUBSQUID_KEY = credentials("${subsquidToken}")
        PROJECT_NAME = "${targetProject}"
        TELEGRAM_CHAT_ID = credentials("${telegramChatId}")
    }

    stages {
        stage('Secret scanner') {
            steps {
                script {
                    docker.withRegistry('https://' + registry, dockerBuildToolsUserId) {
                        secretScanner(disableSecretScanner, secretScannerExclusion)
                    }
                }
            }
        }
        stage('Install dependencies') {
            steps {
                script {
                    // docker.withRegistry( 'https://' + registry, dockerBuildToolsUserId) {
                    //     docker.image(agentImage).inside(){
                        sh """
                            apt-get update
                            apt-get install make git curl -y
                            npm -i -g npx
                            npm install -g @subsquid/cli@${SUBSQUID_CLI}
                        """
                        // }
                }
            }
        }
        stage('Create Database migrations') {
            steps {
                script {
                    sh """
                        rm -rf db
                        docker-compose up -d
                        npx squid-typeorm-migration generate
                        npx squid-typeorm-migration create
                        npx squid-typeorm-migration apply
                        docker-compose down
                    """
                }
            }
        }
        stage('Remove squid if needed') {
            when {
                expression {params.fullClean}
            }
            steps {
                script {
                        sh """
                            sqd auth -k ${SUBSQUID_KEY}
                            sqd kill ${PROJECT_NAME} -f
                        """
                }
            }
        }
        stage('Deploy') {
            when {  anyOf {        
                expression {params.fullClean}
                expression {params.deploy}
                }
            }
            steps {
                script {
                    sh """
                        sqd auth -k ${SUBSQUID_KEY}
                        sqd init ${PROJECT_NAME} --template .
                        sqd deploy ${PROJECT_NAME}  --update --no-stream-logs
                    """
                }
            }
        }
        stage('Restart squid if needed') {
            when {
                expression {params.restart}
            }
            steps {
                script {
                    sh """
                        sqd auth -k ${SUBSQUID_KEY}
                        sqd redeploy ${PROJECT_NAME}@v1
                    """
                }
            }
        }
        stage('Hard reset squid if needed') {
            when {
                expression {params.hardReset}
            }
            steps {
                script {
                    sh """
                        sqd auth -k ${SUBSQUID_KEY}
                        sqd init ${PROJECT_NAME} --template .
                        sqd deploy ${PROJECT_NAME} -u -r --no-stream-logs
                    """
                }
            }
        }
    }
    post {
        always {
            pushNotiTelegram(
              status: statusNotif,
              telegramChatId: "${TELEGRAM_CHAT_ID}"
            ) 
        }
        cleanup { cleanWs() }
    }
}