enum SnapshotType {
	DEFAULT
	HOUR
	DAY
	MONTH
}

enum PayeeType {
	STAKED
	STASH
	CONTROLLER,
	ACCOUNT,
	NONE
}

enum HistoryElementType {
	CALL
	EVENT
}

type NetworkStats @entity {
	id: ID!
	totalFees: BigInt!
	totalAccounts: Int!
	totalTransactions: Int!
	totalBridgeIncomingTransactions: Int!
	totalBridgeOutgoingTransactions: Int!
	updatedAtBlock: Int!
}

type NetworkSnapshot @entity {
	id: ID!
	type: SnapshotType!
	timestamp: Int!
	accounts: Int!
	transactions: Int!
	fees: BigInt!
	liquidityUSD: String!
	volumeUSD: String!
	bridgeIncomingTransactions: Int!
	bridgeOutgoingTransactions: Int!
	updatedAtBlock: Int!
}

type UpdatesStream @entity {
  id: ID!
  block: Int!
  data: String! # stringified JSON
}

type Asset @entity {
	id: ID!
	data: [AssetSnapshot!]! @derivedFrom(field: "asset")
	poolXYK: [PoolXYK] @derivedFrom(field: "targetAsset")
	priceUSD: String!
	supply: BigInt!
	liquidity: BigInt # locked in pools (in tokens)
  	liquidityBooks: BigInt # locked in order books (in tokens)
	priceChangeDay: Float
	priceChangeWeek: Float
	volumeDayUSD: Float
	volumeWeekUSD: Float
	velocity: Float # calculated in week
	updatedAtBlock: Int!
}

type AssetPrice @jsonField {
	open: String!
	close: String!
	high: String!
	low: String!
}

type AssetVolume @jsonField {
	amount: String!
	amountUSD: String!
}

type AssetSnapshot @entity {
	id: ID!
	assetId: String! @index
	asset: Asset! @index # relation to Asset
	timestamp: Int! @index
	type: SnapshotType!
	priceUSD: AssetPrice
	volume: AssetVolume
	supply: BigInt!
	mint: BigInt!
	burn: BigInt!
	updatedAtBlock: Int!
}

type PoolXYK @entity {
	id: ID!
	baseAsset: Asset! @index
	targetAsset: Asset! @index
	baseAssetReserves: BigInt!
	targetAssetReserves: BigInt!
	multiplier: Int!
	priceUSD: String
	strategicBonusApy: String
	updatedAtBlock: Int!
}

type Account @entity {
	id: ID!
	latestHistoryElement: HistoryElement
	updatedAtBlock: Int!
}

type HistoryElement @entity {
	id: ID!
	type: HistoryElementType!
	blockHeight: Int! @index
	blockHash: String! @index
	name: String!
	module: String! @index
	method: String! @index
	address: String! @index
	networkFee: String
	execution: ExecutionResult!
	timestamp: Int! @index
	data: JSON @index
	dataTo: String @index
	dataFrom: String @index
	dataReceivers: [String]!
	calls: [HistoryElementCall!]! @derivedFrom(field: "historyElement")
	callNames: [String]!
	updatedAtBlock: Int! @index
}

type HistoryElementCall @entity {
	id: ID!
	historyElement: HistoryElement! @index
	module: String!
	method: String!
	data: JSON!
	updatedAtBlock: Int! @index
}

type ExecutionResult @jsonField {
	success: Boolean!
	error: ExecutionError
}

type ExecutionError @jsonField {
	moduleErrorId: Int
	moduleErrorIndex: Int
	nonModuleErrorMessage: String
}

type ReferrerReward @entity {
	id: ID!
	referral: String! @index
	referrer: String!
	updated: Int!
	amount: BigInt!
	updatedAtBlock: Int!
}

type StakingReward @entity {
	id: ID!
	amount: String!
	staker: StakingStaker!
	payeeType: PayeeType!
	payee: String @index
	era: StakingEra!
	timestamp: Int!
}

type StakingStaker @entity {
	id: ID!
	eraValidators: [StakingEraValidator!]! @derivedFrom(field: "staker")
	eraNominators: [StakingEraNominator!]! @derivedFrom(field: "staker")
	payeeType: PayeeType!
	payee: String
	controller: String
}

type StakingValidator @entity {
    id: ID!
    bond: BigInt!
}

type StakingEraNominator @entity {
	id: ID!
    era: StakingEra!
    bond: BigInt!
    staker: StakingStaker!
    nominations: [StakingEraNomination!]! @derivedFrom(field: "nominator")
}

type StakingEraNomination @entity {
	id: ID!
    era: StakingEra!
    amount: BigInt!
    validator: StakingEraValidator!
    nominator: StakingEraNominator!
}

type StakingEraValidator @entity {
	id: ID!
    era: StakingEra!
    validator: StakingValidator!
    nominations: [StakingEraNomination!]! @derivedFrom(field: "validator")
    ownBond: BigInt!
    totalBond: BigInt!
    rewardAmount: BigInt!
	staker: StakingStaker!
}

type StakingEra @entity {
	id: ID!
	index: Int! @index
	start: BigInt! @index
    validators: [StakingEraValidator!]! @derivedFrom(field: "era")
	nominators: [StakingEraNominator!]! @derivedFrom(field: "era")
    nominations: [StakingEraNomination!]! @derivedFrom(field: "era")
}

enum OrderBookStatus {
	Trade
	PlaceAndCancel
	OnlyCancel
	Stop
}

enum OrderStatus {
	Active
	Aligned
	Canceled
	Expired
	Filled
}

enum OrderType {
	Limit
	Market
}

interface IOrderBookDeal {
	timestamp: Int! # created (and could be executed) at block timestamp
	isBuy: Boolean! # buy or sell
	amount: String! # number like formatted
	price: String! # number like formatted
}

type OrderBookDeal implements IOrderBookDeal @jsonField {
	orderId: Int!
	timestamp: Int!
	isBuy: Boolean!
	amount: String!
	price: String!
}

type OrderBook @entity {
	id: ID!
	dexId: Int! @index
	baseAsset: Asset! @index
	quoteAsset: Asset! @index
	baseAssetReserves: BigInt!
	quoteAssetReserves: BigInt!
	status: OrderBookStatus!
	price: String
	priceChangeDay: Float
	volumeDayUSD: String
	orders: [OrderBookOrder!]! @derivedFrom(field: "orderBook")
	data: [OrderBookSnapshot!]! @derivedFrom(field: "orderBook")
	lastDeals: String
	updatedAtBlock: Int!
}

type OrderBookSnapshot @entity {
	id: ID!
	orderBook: OrderBook! @index
	timestamp: Int!
	type: SnapshotType!
	price: AssetPrice!
	baseAssetVolume: String!
	quoteAssetVolume: String!
	volumeUSD: String!
  	liquidityUSD: String!
}

type OrderBookOrder implements IOrderBookDeal @entity {
	id: ID!
	type: OrderType!
	orderId: Int
	orderBook: OrderBook! @index
	account: Account! @index
	createdAtBlock: Int!
	timestamp: Int!
	isBuy: Boolean!
	amount: String!
	price: String!
	lifetime: Int!
	expiresAt: Int!
	amountFilled: String!
	status: OrderStatus!
	updatedAtBlock: Int!
}